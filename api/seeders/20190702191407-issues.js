"use strict";
const faker = require("faker");
const times = require("lodash.times");
const random = require("lodash.random");

const issues = [
  {
    title: "Able to click on Objectives picture and description",
    description:
      "Issue with Objectives in general, however, this is exacerbated with demo mode landing in objectives. Having just the copy highlighting how the user accesses labs through objectives, worried that we will see increased drop off. ",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 3,
  },
  {
    title: "Move reveal answers button to bottom",
    description:
      "Demo users should not be tempted to reveal answers too soon, putting the button at the bottom will prompt them to try and answer the questions first and only reveal answers if they struggle.\r\n\r\nIt should also be made very clear that the reveal answers button is only available in demo mode.\r\n\r\nThe button should be placed in a `Notice` component with clear copy explaining the above (copy to come from marketing)",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "Demo mode - Labs ",
    description:
      "Marketing want to choose which labs are on the demo site, so that the labs that get the most ‘wow factor' are easily accessible. We’ll be containing labs in objectives, and will restrict their access via themes/skills; as there will be a subset of labs available. Trying to navigate through to find the reduced set of demo mode labs, we could loose people.",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 6,
  },
  {
    title: "Refactor top of top level pages ",
    statusId: 6,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 3,
  },
  {
    title: "In demo mode, show modal when clicking themes and hide search",
    statusId: 6,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 3,
  },
  {
    title: "repopulating_form_error demo/labs",
    statusId: 1,
    type: "bug",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
  },
  {
    title: "Demo mode redirect on login broken",
    statusId: 5,
    type: "bug",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
  },
  {
    title: "Demo mode - User can reveal answers ",
    description: null,
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 6,
    parentId: null,
  },
  {
    title: "FE - add reveal button and request",
    statusId: 6,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 8,
  },
  {
    title: "FE - pre-populate quiz fields with answers",
    statusId: 6,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 8,
  },
  {
    title: "BE",
    statusId: 6,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 8,
  },
  {
    title: "FE - release candidate",
    statusId: 6,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 8,
  },
  {
    title: "Demo mode - Insights tab",
    description:
      "For the graph data we would like to make sure that the total labs, and total points, don't flat line if there are either not enough or no, lab completions. Also to ensure that there is 12 weeks worth of data for difficulty and objectives. ",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "Demo mode - MITRE ATT&CK data",
    description: null,
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "FE - Disable the links on the mitre tooltip",
    statusId: 6,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 14,
  },
  {
    title: "BE",
    statusId: 6,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 14,
  },
  {
    title: "Demo mode - post to hubspot form to exclude personal email",
    description:
      "Marketing would like to market people who have gone onto the demo site, but not then contacted us for a demo. By capturing business emails we can rely on legitimate interest. \n\nHubpsot form created that will prevent personal email addresses being added.",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "Labs drawer refactor",
    description:
      "_(Ticket previously know as “Labs look squashed”)_\n\nAs we have added the header banner in, this has caused the question panel in labs to looked squashed.\n\n*PR:* [here|https://github.com/ImmersiveLabsUkOrg/immersive-labs-main/pull/1294]\n\n*Branch:* hotfix/refactor_drawers",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "Contact us form posts to the right place",
    description: null,
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "User management list shows people who shouldn't be there",
    description:
      "When people are entering demo mode, we are adding their first name/last name etc. to the database. Therefore they are showing up in the management user’s list",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title:
      "User is assigned to the created objectives when they enter demo mode",
    description:
      "When demo mode user is created, they are auto enrolled into the objectives that have been made for demo mode. This needs to follow the manager assigned, assign method, so that the user cannot unassign themselves.",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "Integration test demo mode",
    description:
      "Once all of the first release stories are on demo mode env. final test before handing over to Marketing",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 1,
    parentId: null,
  },
  {
    title: "FTU has dismiss modal when selecting Launch demo button",
    statusId: 1,
    type: "bug",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 3,
  },
  {
    title: "Ranking issue on leaderboard",
    statusId: 1,
    type: "bug",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
  },
  {
    title: "Choose where to show platform notification ",
    description:
      "Update the platform alert so that we can show on individual pages on the platform. IL user can chose whether it shows on multiple pages, one or all.",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 2,
    parentId: null,
  },
  {
    title: "BE - update to the new notification model",
    statusId: 2,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 25,
  },
  {
    title: "FE - Update notification logic on FE",
    statusId: 2,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 25,
  },
  {
    title: "Share on social media",
    description:
      'On the lab completion page there is a "share your lab completion" CTA that allows you to share the fact you have completed the lab on social media.\n\nThe user will share:\nI just completed \\[name of lab] on Immersive Labs\\! Try it out here: \\[link to log in/lab page]\nAttached image\n\nThe priority order of the social media to share is:\nLinkedIn\nTwitter\nFacebook',
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 2,
  },
  {
    title:
      "Collapse user hierarchy: Make all Auth code depend on Account, not Account::User",
    description:
      "This code is all done and is in the `feature/collapse_user_hierarchy_5` branch.\r\n\r\nNeeds to be PRed and QAed.",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "Add coding languages ",
    description:
      "Currently content are putting everything down as Python when they don’t have a corresponding language to use. ",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 5,
  },
  {
    title: "Inline Code blocks to have a black background ",
    description:
      "Currently the smaller code block snippets in labs have a grey background. Whereas the bigger chunks of code have the more common (ITRW) black background. This creates inconsistency, and also has the potential to not be recognised as code. ",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 5,
  },
  {
    title: "Implement Matter Chip Component",
    description:
      'In order to ensure consistent use of Chips(see screenshots for example), a new {{<Chip/>}} component should be created and implemented within Matter.\n\nThis component should supersede any of the various other Chiplike components within Main.\n\nAPI Proposal as discussed in the #matter slack channel:\n\n{code:json}{\r\n  "componentName": "<Chip/>",\r\n  "description": "A chip is a compact element that represents information or an action",\r\n  "data-qaid": {\r\n    "value": "chip-{props.label}",\r\n    "example": "chip-platformUpdates"\r\n  },\r\n  "props": {\r\n    "label": {\r\n      "type": "string",\r\n      "example": "Platform Updates",\r\n      "required": true\r\n    },\r\n    "number": {\r\n      "type": "number",\r\n      "example": "23",\r\n      "required": false\r\n    },\r\n    "onClick": {\r\n      "type": "Function",\r\n      "description": "When provided, rendered element for the chip will be a button and click event emitted",\r\n      "required": false\r\n    },\r\n    "icon": {\r\n      "type": "Element",\r\n      "description": "Icon will inherit text size and color",\r\n      "required": false\r\n    },\r\n    "color": {\r\n      "type": "Object",\r\n      "description": "Pass a single string to refer to a palette status color otherwise pass an object to set the text-color, background, background panel and icon color",\r\n      "default": "ChipPaletteColor",\r\n      "required": false\r\n    }\r\n  },\r\n  "ColorObjectSturcture": {{\r\n      "textColor": "#hex",\r\n      "backgroundColor": "#hex",\r\n      "panelBackgroundColor": "#hex"    \n}\r\n  }\r\n}{code}\n\n* note Chip style variation should inferred from the props passed\n\n',
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 2,
    parentId: null,
  },
  {
    title: "Create Chip component in Matter",
    statusId: 3,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 32,
  },
  {
    title: "Replace  chip components in Main",
    statusId: 2,
    type: "task",
    sprintId: 1,
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 32,
  },
  {
    title: "Reset demo env every midnight",
    description:
      "Update the cron schedule to reset the demo env every midnight.",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 6,
  },
  {
    title: "setup/test FINRA SSO for Kieran",
    description:
      "FINRA are adding SSO support.\r\n\r\nSet up SSO for them on staging. Be ready to respond to issues as they test it.",
    type: "story",
    sprintId: 1,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: null,
    statusId: 2,
  },

  {
    title: "Google Analytics stories - Batch 1",
    description:
      "This is a collation of the first batch of refined GA stories. Grouped here for ease of QA and tracking.",
    sprintId: 2,
    parentId: null,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 6,
  },
  {
    title: "Google Analytics stories - Batch 2",
    description:
      "This is a collation of a batch of refined GA stories. Grouped here for ease of QA and tracking.",
    sprintId: 2,
    parentId: null,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 3,
  },
  {
    title: "Smoke Test - Labs Main page Navigation [C12]",
    description: null,
    sprintId: 2,
    parentId: null,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 6,
  },
  {
    title: "Matter Card component",
    description:
      '"Card" style list items are used in a few places across the platform, like the skills at */labs/* and objectives at */learning-objectives/*, and should have a uniform appearance while maintaining the functionality all the variants currently have.\n\n\n\n*Card Component API Proposal*\n\n{code:json}{\n  "componentName": "<Card />",\n  "description": "A generic item styled like a card. Can output an image, a progress bar, title, body text, and a footer containing child elements.",\n  "data-qaid": {\n    "value": "card-{props.qaid}",\n    "example": "card-introToCyber"\n  },\n  "props": {\n    "qaid": {\n      "type": "string",\n      "description": "A unique label for automated testing purposes. Also used as the `id` and `for` attributes",\n      "required": true\n    },\n    "linkTo": {\n      "type": "string",\n      "description": "URL to link to if the whole card should link somewhere.",\n      "required": false\n    },\n    "isLoading": {\n      "type": "boolean",\n      "description": "Determines the loading state of the card",\n      "required": false\n    },\n    "variation": {\n      "type": "string",\n      "description": "Determines card styling, e.g. for a completed objective or a failed assessment.",\n      "values": ["success", "failure"],\n      "required": false\n    },\n    "children": {\n      "type": "node",\n      "description": "Child components for image, metadata, progress, title, body text, and footer",\n      "required": true\n    }\n  }\n}\n{code}\n\n',
    sprintId: 2,
    parentId: null,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 2,
  },
  {
    title:
      "Google Analytics events to be tracked: Users entering platform via New labs notification email",
    description:
      "Use Google Analytics to track platform events\r\n\r\nEmail received when a new lab is added to the platform - there is a link within the email to view the new lab. \r\nEvent to be recorded - clicking this link and entering the platform",
    sprintId: 2,
    statusId: 6,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "BE Task",
    statusId: 6,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 5,
  },
  {
    title: "FE Task",
    statusId: 6,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 5,
  },
  {
    title: "Implement Matter Avatar Component",
    description:
      'In order to ensure consistent user Avatars, a new Avatar component should be created and implemented within Matter.\r\n\r\nThis component should supersede the existing {{<Avatar>}} component implemented in Main.\r\n\r\nAPI proposal as discussed in the #matter slack channel: \r\n\r\n{code:json}\r\n{\r\n  "componentName": "<Avatar/>",\r\n  "description": "A rounded avatar image for a user, fallsback to initials if the image fails to load",\r\n  "data-qaid": {\r\n    "value": "avatar-{props.name}",\r\n    "description": "props.name will be camelcased",\r\n    "example": "avatar-joeBloggs"\r\n  },\r\n  "props": {\r\n    "src": {\r\n      "type": "string",\r\n      "description": "URL of avatar image to be rendered",\r\n      "example": "https://assets.immersivelabs.online/uploads/asset/attachment/6201/images_w800h600_attachment.png",\r\n      "required": false\r\n    },\r\n    "variation": {\r\n      "type": "oneOf -> [x-small, small, medium, large]",\r\n      "description": "Sizing variations for the Avatar",\r\n      "default": "small",\r\n      "required": false\r\n    },\r\n    "name": {\r\n      "type": "Array<string>",\r\n      "description": "First and last name of the user, this is used for a fallback if there\'s no image or the image fails to load",\r\n      "validation": "length === 2",\r\n      "example": "[\'Joe\', \'Blogs\' ]",\r\n      "required": true\r\n    }\r\n  }\r\n}\r\n{code}\r\n',
    sprintId: 2,
    statusId: 6,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Create Avatar component in Matter",
    statusId: 6,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 8,
  },
  {
    title: "Replace instances of Avatar component within Main",
    statusId: 6,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 8,
  },
  {
    title: "Navigation back to Team user list view",
    description:
      "The navigation from User profile, when accessed from Team members list, doesn’t take the manager back to the correct place",
    sprintId: 2,
    parentId: null,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 6,
  },
  {
    title: "Cyber CV button - data collection",
    description:
      "We want to understand how much interest there is in a cyber CV from our User base. By putting a button on the site, and measuring the clicks; we can understand the whether this is something people want.",
    sprintId: 2,
    parentId: null,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 5,
  },
  {
    title: "Create Factory Method For Account",
    description:
      "We now have a couple of dependencies when an account is created that must also be created. Me and Marty discussed callbacks vs factory method and the latter was the option we decided would be best.\n\nWe need to have a method that creates both the account and permissions, account can just be configured normally but the permissions ideally we wouldnt pass in a list of booleans. If you look at the factory account/user you can see a bunch of traits `employee, manager...` we should create constants of permissions that map to these so we can create a user who is an employee without having to pass in a bunch of booleans.\n\nThis will not deal with creating CMS users for phase 1.\n\nWill not create profiles or personas, users must hit blockers and confirm as usual.",
    sprintId: 2,
    statusId: 3,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title:
      "Create AccountCreator model and rename Demo::AccountCreator to Demo::AccountGenerator",
    statusId: 6,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 13,
  },
  {
    title: "Switch ImmersiveAuth::Registration to use AccountCreator",
    statusId: 3,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 13,
  },
  {
    title:
      "Make Account::Creator safe for SSO, and remove ImmersiveAuth::RegistrationFinalizer",
    statusId: 3,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 13,
  },
  {
    title:
      "Replace logic in Demo::AccountGenerator with a delegation to AccountCreator",
    statusId: 3,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 13,
  },
  {
    title:
      "Replace account creation logic logic in Demo::Initialize with a delegation to Demo::AccountGenerator",
    statusId: 3,
    type: "task",
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    parentId: 13,
  },
  {
    title: "Google Analytics events to be tracked: FTU tour usage",
    description:
      "\n\nUse Google Analytics to track platform events \n\nNumber of labs opened from the final page (5) of FTU tour\n\nAverage time spent on FTU tour - from modal opening to closing the modal (by ending tour or selecting a lab)\n\nPage abandonment for FTU tour - how many people closed the tour on each page (to be clear, this is NOT when a user selects a lab on page 5)\n\nLaunch FTU from profile page settings tab\ne.g. [+https://main.immersivelabs.online/profile/pamelasmith83/settings+|https://main.immersivelabs.online/profile/pamelasmith83/settings]",
    sprintId: 2,
    parentId: null,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 6,
  },
  {
    title: "SPIKE: Investigate customisation options of date picker libraries",
    description:
      "In a recent meeting with the design team it was decided we would use a third party library to provide a consistent date picker UI across platforms and browsers. This spike task is to investigate the two frontrunners and determine which will fit our needs the best:\r\n\r\n* React Datepicker: https://github.com/Hacker0x01/react-datepicker\r\n* Airbnb React Dates: https://github.com/airbnb/react-dates\r\n\r\nWe'll need to consider the size of each solution to try and limit the amount of bloat added to our bundle, and how easy it is to override each library's styles to more closely match the designs provided by our design team.\r\n",
    sprintId: 2,
    parentId: null,
    storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
    assigneeId: random(1, 10),
    reporterId: random(1, 10),
    createdAt: new Date(),
    updatedAt: new Date(),
    statusId: 6,
  },
];
module.exports = {
  up: (queryInterface, Sequelize) =>
    queryInterface
      .bulkInsert("issues", issues)
      .then(
        times(10, () =>
          queryInterface.bulkUpdate(
            "issues",
            { parentId: random(1, 15) },
            { id: random(1, 15) }
          )
        )
      ),
  down: (queryInterface, Sequelize) => {},
};

/**
 times(15, () => ({
          title: faker.lorem.sentence(),
          description: faker.lorem.sentences(4),
          statusId: random(1, 6),
          type: faker.random.arrayElement(["bug", "task"]),
          sprintId: random(1, 4),
          storyPoints: faker.random.arrayElement([1, 2, 3, 5, 8, 13, 21]),
          assigneeId: random(1, 10),
          reporterId: random(1, 10),
          createdAt: new Date(),
          updatedAt: new Date(),
        }))
 */
